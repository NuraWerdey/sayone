from telethon import TelegramClient, events, Button
from core.loader import load_all_modules
import config
import asyncio
import json

async def main():
    client = TelegramClient("SayOne", config.API_ID, config.API_HASH)
    await client.start()
    print("Sayone Started!")
    
# –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
def load_settings():
    try:
        with open("settings.json", "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"auto_load": True, "security": False, "logs": True}

def save_settings(settings):
    with open("settings.json", "w") as f:
        json.dump(settings, f, indent=4)
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .settings
@client.on(events.NewMessage(pattern=r'\.settings'))
async def settings_handler(event):
    settings = load_settings()
    buttons = [
        [
            Button.inline(f"üîÑ –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞: {'ON' if settings['auto_load'] else 'OFF'}", b"toggle_auto_load"),
            Button.inline(f"üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {'ON' if settings['security'] else 'OFF'}", b"toggle_security")
        ],
        [Button.inline("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", b"save_settings")]
    ]
    await event.respond("‚öô **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ UserBot**", buttons=buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@client.on(events.CallbackQuery(data=b"toggle_auto_load"))
async def toggle_auto_load(event):
    settings = load_settings()
    settings["auto_load"] = not settings["auto_load"]
    save_settings(settings)
    await event.answer(f"–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞: {'ON' if settings['auto_load'] else 'OFF'}")
    await event.delete()

@client.on(events.CallbackQuery(data=b"toggle_security"))
async def toggle_security(event):
    settings = load_settings()
    settings["security"] = not settings["security"]
    save_settings(settings)
    await event.answer(f"–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {'ON' if settings['security'] else 'OFF'}")
    await event.delete()

@client.on(events.CallbackQuery(data=b"save_settings"))
async def save_settings_handler(event):
    await event.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await event.delete()
    
    # –ê–≤—Ç–æ-–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π
    load_all_modules(client)
    
    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())
    
